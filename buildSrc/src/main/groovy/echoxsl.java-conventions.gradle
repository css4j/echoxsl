plugins {
	id 'java-library'
	id 'maven-publish'
}

repositories {
	maven {
		url = uri('https://repo.maven.apache.org/maven2/')
	}
}

group = 'com.github.css4j'
version = '2.7.2'

java {
	sourceCompatibility = JavaVersion.VERSION_1_7
	targetCompatibility = JavaVersion.VERSION_1_7
	withJavadocJar()
	withSourcesJar()
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charset', 'UTF-8')
	options.links 'https://docs.oracle.com/javase/8/docs/api/'
}

tasks.register('lineEndingConvCopy', CRLFConvertCopy) {
	from "$rootDir/LICENSE.txt"
	from "$rootDir/NOTICE.txt"
}

tasks.register('cleanBuildSrc') {
	doLast {
		delete("$rootDir/buildSrc/build")
	}
}

tasks.named('clean') {
	finalizedBy('cleanBuildSrc')
}

tasks.withType(AbstractArchiveTask).configureEach {
	// Reproducible build
	preserveFileTimestamps = false
	reproducibleFileOrder = true
	// Copy license file
	dependsOn lineEndingConvCopy
	from ('build/tmp/crlf/LICENSE.txt') {
		into 'META-INF'
	}
	from ('build/tmp/crlf/NOTICE.txt') {
		into 'META-INF'
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			from(components.java)
			pom {
				url = "https://github.com/css4j/echoxsl/"
				licenses {
					license {
						name = "The Apache License, Version 2.0"
						url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
					}
				}
			}
		}
	}
	repositories {
		maven {
			name = 'mavenRepo'
			/*
			 * The following section applies to the 'publish' task:
			 *
			 * If you plan to deploy to a repository, please configure the
			 * 'mavenReleaseRepoUrl' and/or 'mavenSnapshotRepoUrl' properties
			 * (for example in GRADLE_USER_HOME/gradle.properties).
			 *
			 * Otherwise, Gradle shall create a 'build/repository' subdirectory
			 * at ${rootDir} and deploy there.
			 *
			 * Properties 'mavenRepoUsername' and 'mavenRepoPassword' can also
			 * be set (generally from command line).
			 */
			def releasesUrl
			def snapshotsUrl
			if (project.hasProperty('mavenReleaseRepoUrl') && project.mavenReleaseRepoUrl) {
				releasesUrl = mavenReleaseRepoUrl
			} else {
				releasesUrl = "${buildDir}/repository/releases"
			}
			if (project.hasProperty('mavenSnapshotRepoUrl') && project.mavenSnapshotRepoUrl) {
				snapshotsUrl = mavenSnapshotRepoUrl
			} else {
				snapshotsUrl = "${buildDir}/repository/snapshots"
			}
			url = version.endsWith('-SNAPSHOT') ? snapshotsUrl : releasesUrl
			if (project.hasProperty('mavenRepoUsername') &&
					project.hasProperty('mavenRepoPassword')) {
				credentials.username = mavenRepoUsername
				credentials.password = mavenRepoPassword
			}
		}
	}
}

tasks.withType(PublishToMavenRepository) { task ->
	doFirst {
		if (repository == publishing.repositories.getByName('mavenRepo')) {
			logger.lifecycle "Deploying artifacts to \"${it.repository.url}\""
		}
	}
}
